
  
---
##########################################################################################################################
# Openstack Configuration automated using Ansible. The Openstack official guide and Ansible mod has been used to prepare #
# this playbook.   
#                                                                                                                        #
#  Steps to run the playbook: cd ~/ansible_practice/playbooks/openstack-install/                                                                                                                      #
#                             ansible-playbook playbook.yml -u root -i hosts                                                                                          #
#                                                                                                                        #
#  This has been tested on CentOs 7                                                                                                                       #
#                                                                                                                        #
#                                                                                                                        #  
#                                                                                                                        #
#                                                                                                                        #
#  - John Lam                                                                                                                      #
#                                                                                                                        #
##############################################################################################################################


- name: Replace default /etc/hosts file with configured hosts file from templates
  template: src=hosts  dest=/etc/hosts
    #owner: root
    #group: root
    #mode: 0744

- name: Replace default /etc/hostname file with configured hostname file from templates
  template: src=hostname dest=/etc/hostname
  
- name: install MySQL-python
  package:
    name: MySQL-python
    state: present

- name: Install the latest verion of centos-release-openstack-ocata
  package:
    name: centos-release-openstack-ocata
    state: present

- name: upgrade all packages
  yum: name=* state=latest

- name: COMMON | Install basic packages
  package: name={{ item }} state=present
  with_items:
    - python-openstackclient
    - openstack-selinux
    - mariadb
    - mariadb-server
    - python2-PyMySQL

- name: Create and edit the/etc/my.cnf.d/openstack.cnf file
  template: src=openstack.cnf dest=/etc/my.cnf.d/openstack.cnf

- name: enable mariadb
  command: systemctl enable mariadb.service
  notify: start mariadb
  tags: systemctl 
  ignore_errors: yes

- name: Install the latest verion of Rabbitmq-server
  package:
    name: rabbitmq-server
    state: latest

- name: enable rabbitmq-server
  command: systemctl enable rabbitmq-server.service
  notify: start rabbitmq-server
  tags: systemctl

- name: Create rabbitmq user "openstack" and giving user full permissions.
  rabbitmq_user:
    user: openstack
    password: RABBIT_PASS
    vhost: /
    configure_priv: .*
    read_priv: .*
    write_priv: .*
    state: present

- name: COMMON | Install memcached and python-memcached
  package: name={{ item }} state=present
  with_items:
    - memcached
    - python-memcached


- name: replace line
  lineinfile:
    dest: /etc/sysconfig/memcached
    regexp: '^(.*)OPTIONS="-l 127.0.0.1,::1"(.*)$'
    line: 'OPTIONS="-l 127.0.0.1,::1,controller"'
    backrefs: yes

- name: enable memcached
  become: root
  command: systemctl enable memcached.service
  notify: start memcached
  tags: systemctl

- name: Set root user password
  # If .my.cnf already exists, this will cause an mysql-root-password update.
  mysql_user:
    login_user: root
    login_password: and345
    name: root
    password: "{{ mysql_root_password}}"
    check_implicit_admin: true

- name: Create .my.cnf
  template:
   src: "client.my.cnf.j2"
   dest: "/root/.my.cnf"
   owner: root
   group: root
   mode: 700

- name: Create a new database with name 'keystone'
  mysql_db:
    name: keystone
    state: present
  tags: database

- name: give permissions to keystone database
  mysql_user:
    name: keystone
    password: "{{keystone_password}}"
    priv: '*.*:ALL,GRANT'
    host: localhost
    state: present
  tags: database

- name: give permissions to keystone database
  mysql_user:
    name: keystone
    password: "{{keystone_password}}"
    priv: '*.*:ALL,GRANT'
    host: '%'
    state: present
  tags: database

- name: COMMON | Install openstack-keystone httpd mod_wsgi
  package: name={{ item }} state=present
  with_items:
    - openstack-keystone
    - httpd
    - mod_wsgi

- name: Edit the/etc/keystone/keystone.conf file
  template: src=keystone.conf  dest=/etc/keystone/keystone.conf


# - name: Populate the Identity service database
#   become_user: sudo 
# - name: Sync Keystone database
# - command: keystone-manage db_sync
#   become: yes
#   become_user: keystone
#   ignore_errors: yes

- command: su -s /bin/sh -c "keystone-manage db_sync" keystone
  #become_method: su 

- name: initialize Fernet key repositories - 1
  command: keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone

- name: initialize Fernet key repositories - 2
  command: keystone-manage credential_setup --keystone-user keystone --keystone-group keystone

- command: keystone-manage bootstrap --bootstrap-password ADMIN_PASS --bootstrap-admin-url http://controller:35357/v3/  --bootstrap-internal-url http://controller:5000/v3/  --bootstrap-public-url http://controller:5000/v3/  --bootstrap-region-id RegionOne
 
- name: Adding ServerName "controller" to httpd.conf file
  lineinfile:
    path: /etc/httpd/conf/httpd.conf
    line: 'ServerName controller'

- name: enable httpd
  command: systemctl enable httpd.service
  notify: start httpd
  tags: systemctl

- shell: ls -l /etc/httpd/conf.d/ | grep wsgi-keystone.conf || ln -s /usr/share/keystone/wsgi-keystone.conf /etc/httpd/conf.d/
  ignore_errors: yes


################################################# CREATING OPENSTACK PROJECT USERS AND ROLES ###################################################

- template: src=admin-openrc.sh dest=/root/ owner=root mode=0600

- name: Creating a project named 'Service'
  shell: source /root/admin-openrc.sh && openstack project list | grep 'service' || openstack project create --domain default  --description "Service Project" service
  ignore_errors: yes
  
- name: Creating a project named 'Demo'
  shell: source /root/admin-openrc.sh && openstack project list | grep 'demo' || openstack project create --domain default  --description "Demo Project" demo
  ignore_errors: yes
  
- name: Creating a user named 'demo'
  shell: source /root/admin-openrc.sh && openstack user list| grep 'demo' || openstack user create --password {{demo_user}} demo
  ignore_errors: yes
  
- name: Creating a role named 'user'
  shell: source /root/admin-openrc.sh && openstack role list | grep 'user' || openstack role create user 
  ignore_errors: yes
 
- name: Add the user role to the demo user of the demo project
  shell: source /root/admin-openrc.sh && openstack role add --project demo --user demo user 
  ignore_errors: yes
 
- name: Replace default /etc/keystone/keystone-paste.ini file with configured 'keystone-paste.ini' file from templates
  template: src=keystone-paste.ini dest=/etc/keystone/keystone-paste.ini
  

- name: Unset unset OS_AUTH_URL OS_PASSWORD
  raw: unset OS_AUTH_URL OS_PASSWORD
  ignore_errors: yes

########################################## NEEDS TO BE FIXED. CAN ONLY RUN ONCE ####################################################################
# - name: token for admin
#   shell: source /root/admin-openrc.sh && openstack --os-auth-url http://controller:35357/v3  --os-project-domain-name default --os-user-domain-name default  --os-project-name admin  --os-username admin --os-password ADMIN_PASS token issue

# - name: token for demo
#   shell: source /root/admin-openrc.sh && openstack --os-auth-url http://controller:5000/v3  --os-project-domain-name default --os-user-domain-name default  --os-project-name demo --os-username demo --os-password and345 token issue
##################################################### GLANCE CONFIG ##############################################################

- name: Create a new database with name 'glance'
  mysql_db:
    name: glance
    state: present
  tags: database

- name: give permissions to keystone database
  mysql_user:
    name: glance
    password: "{{glance_password}}"
    host: localhost
    priv: '*.*:ALL,GRANT'
    state: present
  tags: database

- name: give permissions to keystone database
  mysql_user:
    name: glance
    password: "{{glance_password}}"
    priv: '*.*:ALL,GRANT'
    host: '%'
    state: present
  tags: database

- name: create glance user
  shell: source /root/admin-openrc.sh && openstack user list| grep 'glance' || openstack user create --domain default --password and345 glance

- name: Add theadmin role to the glance user andservice  project
  shell: source /root/admin-openrc.sh && openstack role add --project service --user glance admin

- name: Create a glance service entity 
  shell: source /root/admin-openrc.sh && openstack service list | grep 'image' || openstack service create --name glance  --description "OpenStack Image" image

- shell: source /root/admin-openrc.sh && openstack service list | awk '/ image / {print $2}'
  register: SERVICE_ID

- shell: source /root/admin-openrc.sh && openstack endpoint list | grep {{ SERVICE_ID.stdout }} || openstack endpoint create  --region  {{ region }} {{ SERVICE_ID.stdout }} public http://controller:9292  
- shell: source /root/admin-openrc.sh && openstack endpoint list | grep {{ SERVICE_ID.stdout }} || openstack endpoint create  --region  {{ region }} {{ SERVICE_ID.stdout }} internal http://controller:9292 
- shell: source /root/admin-openrc.sh && openstack endpoint list | grep {{ SERVICE_ID.stdout }} || openstack endpoint create  --region  {{ region }} {{ SERVICE_ID.stdout }} admin http://controller:9292 

- name: Install openstack-glance 
  package:
    name: openstack-glance
    state: present

- name: Replace /etc/glance/glance-api.conf wih template conf file
  template: src=glance-api.conf  dest=/etc/glance/glance-api.conf

- name: Replace /etc/glance/glance-registry.conf wih template conf file
  template: src=glance-registry.conf  dest=/etc/glance/glance-registry.conf

- name: Populate the image database
  command: su -s /bin/sh -c "glance-manage db_sync" glance
  tags: database
  ignore_errors: yes 

- name: enable glance api serivce 
  command: systemctl enable openstack-glance-api.service 
  notify: start openstack-glance-api
  tags: systemctl

- name: enable glance register service 
  command: systemctl enable openstack-glance-registry.service
  notify: start openstack-glance-registry
  tags: systemctl 

- name: Download Image 
  get_url: url=http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img dest=/root/cirros-0.3.5-x86_64-disk.img mode=0440

- name: Upload Image 
  shell: source /root/admin-openrc.sh && openstack image list | grep 'cirros' || openstack image create "cirros" --file cirros-0.3.5-x86_64-disk.img  --disk-format qcow2 --container-format bare  --public  < /root/cirros-0.3.5-x86_64-disk.img

############################################################# END ###################################################################


####################################################### NOVA CONFIGURATION ###################################################

######CREATE DATABASES ##########

- name: Create a new database with name 'nova_api'
  mysql_db:
    name: nova_api
    state: present
  tags: database

- name: give permissions to nova_api database
  mysql_user:
    name: nova_api
    password: "{{nova_api_password}}"
    priv: '*.*:ALL,GRANT'
    host: localhost
    state: present
  tags: database

- name: give permissions to nova_api database
  mysql_user:
    name: nova_api
    password: "{{nova_api_password}}"
    priv: '*.*:ALL,GRANT'
    host: '%'
    state: present
  tags: database

- name: Create a new database with name 'nova'
  mysql_db:
    name: nova
    state: present
  tags: database

- name: give permissions to nova database
  mysql_user:
    name: nova
    password: "{{nova_password}}"
    priv: '*.*:ALL,GRANT'
    host: localhost
    state: present
  tags: database

- name: give permissions nova database
  mysql_user: 
    name: keystone 
    host: '%'
    priv: '*.*:ALL,GRANT'
    password: "{{ nova_password }}" 
  tags: database

- name: Create a new database with name 'nova_cell0'
  mysql_db:
    name: nova_cell0
    state: present
  tags: database

- name: give permissions to nova_cell0 database
  mysql_user:
    name: nova_cell0
    password: "{{nova_cell0_password}}"
    priv: '*.*:ALL,GRANT'
    host: localhost
    state: present
  tags: database

- name: give permissions to nova_cell0 database
  mysql_user:
    name: nova_cell0
    password: "{{nova_cell0_password}}"
    priv: '*.*:ALL,GRANT'
    host: "%"
    state: present
  tags: database

###### CREATE USERS ######


#### NOVA
- name: Creating a user named 'nova'
  shell: source /root/admin-openrc.sh && openstack user list| grep 'nova' || openstack user create --password {{nova_user}} nova
  ignore_errors: yes

- name: Add the admin role to nova user 
  shell: source /root/admin-openrc.sh && openstack role add --project service --user nova admin
  ignore_errors: yes

- name: Create a nova service entity 
  shell: source /root/admin-openrc.sh && openstack service list | grep 'compute' || openstack service create --name nova  --description "OpenStack Compute" compute

- shell: source /root/admin-openrc.sh && openstack service list | awk '/ compute / {print $2}'
  register: SERVICE_ID
  tags: service

- shell: source /root/admin-openrc.sh && openstack endpoint list | grep {{ SERVICE_ID.stdout }} || openstack endpoint create  --region  {{ region }} {{ SERVICE_ID.stdout }} public http://controller:8774/v2.1
- shell: source /root/admin-openrc.sh && openstack endpoint list | grep {{ SERVICE_ID.stdout }} || openstack endpoint create  --region  {{ region }} {{ SERVICE_ID.stdout }} internal http://controller:8774/v2.1
- shell: source /root/admin-openrc.sh && openstack endpoint list | grep {{ SERVICE_ID.stdout }} || openstack endpoint create  --region  {{ region }} {{ SERVICE_ID.stdout }} admin http://controller:8774/v2.1 

##### PLACEMENT 

- name: Creating a user named 'PLACEMENT'
  shell: source /root/admin-openrc.sh && openstack user list| grep 'placement' || openstack user create --password {{placement_user}} placement
  ignore_errors: yes

- name: Add the admin role to placement user 
  shell: source /root/admin-openrc.sh && openstack role add --project service --user placement admin
  ignore_errors: yes

- name: Create a placement service entity 
  shell: source /root/admin-openrc.sh && openstack service list | grep 'placement' || openstack service create --name placement  --description "PLACEMENT API" placement

- shell: source /root/admin-openrc.sh && openstack service list | awk '/ placement / {print $2}'
  register: SERVICE_ID

- shell: source /root/admin-openrc.sh && openstack endpoint list | grep {{ SERVICE_ID.stdout }} || openstack endpoint create  --region  {{ region }} {{ SERVICE_ID.stdout }} public http://controller:8778
- shell: source /root/admin-openrc.sh && openstack endpoint list | grep {{ SERVICE_ID.stdout }} || openstack endpoint create  --region  {{ region }} {{ SERVICE_ID.stdout }} internal http://controller:8778
- shell: source /root/admin-openrc.sh && openstack endpoint list | grep {{ SERVICE_ID.stdout }} || openstack endpoint create  --region  {{ region }} {{ SERVICE_ID.stdout }} admin http://controller:8778  

###### INSTALL PACKAGES 

- name: COMMON | Install Nova packages
  package: name={{ item }} state=present
  with_items:
    - openstack-nova-api
    - openstack-nova-conductor
    - openstack-nova-console
    - openstack-nova-novncproxy
    - openstack-nova-scheduler
    - openstack-nova-placement-api

- name: Replace default /etc/nova/nova.conf file with configured 'nova.conf' file from templates
  template: src=nova.conf dest=/etc/nova/nova.conf
  
- name: Replace default 00-nova-placement-api.conf file with the file from templates
  template: src=00-nova-placement-api.conf dest=/etc/httpd/conf.d/00-nova-placement-api.conf

- name: Restart httpd
  command: systemctl restart httpd
  tags: systemctl  

- name: Populate the nova-api database
  command: su -s /bin/sh -c "nova-manage api_db sync" nova
  ignore_errors: yes 

- name: Register the cell0 database 
  command: su -s /bin/sh -c "nova-manage cell_v2 map_cell0" nova
  ignore_errors: yes 

- name: create the cell1 cell 
  shell: nova-manage cell_v2 list_cells | grep 'cell1' || su -s /bin/sh -c "nova-manage cell_v2 create_cell --name=cell1 --verbose" nova

- name: Populate the nova database
  command: su -s /bin/sh -c "nova-manage db sync" nova
  ignore_errors: yes 
  notify: start nova

######################################################## END #################################################################

################################################### NEUTRON CONFIG ########################################################

##### NEUTRON DATABASE 

- name: Create a new database with name 'glance'
  mysql_db:
    name: neutron
    state: present
  tags: database

- name: give permissions to keystone database
  mysql_user:
    name: neutron
    password: "{{neutron_password}}"
    host: localhost
    priv: '*.*:ALL,GRANT'
    state: present
  tags: database

- name: give permissions to keystone database
  mysql_user:
    name: neutron
    password: "{{neutron_password}}"
    priv: '*.*:ALL,GRANT'
    host: '%'
    state: present
  tags: database


- name: Creating a user named 'neutron'
  shell: source /root/admin-openrc.sh && openstack user list| grep 'network' || openstack user create --password {{neutron_user}} neutron
  ignore_errors: yes

- name: Add the admin role to neutron user 
  shell: source /root/admin-openrc.sh && openstack role add --project service --user neutron admin
  ignore_errors: yes

- name: Create a neutron service entity 
  shell: source /root/admin-openrc.sh && openstack service list | grep 'network' || openstack service create --name nova  --description "OpenStack Networking" network

- shell: source /root/admin-openrc.sh && openstack service list | awk '/ network / {print $2}'
  register: SERVICE_ID
  tags: service

- shell: source /root/admin-openrc.sh && openstack endpoint list | grep {{ SERVICE_ID.stdout }} || openstack endpoint create  --region  {{ region }} {{ SERVICE_ID.stdout }} public http://controller:9696
- shell: source /root/admin-openrc.sh && openstack endpoint list | grep {{ SERVICE_ID.stdout }} || openstack endpoint create  --region  {{ region }} {{ SERVICE_ID.stdout }} internal http://controller:9696
- shell: source /root/admin-openrc.sh && openstack endpoint list | grep {{ SERVICE_ID.stdout }} || openstack endpoint create  --region  {{ region }} {{ SERVICE_ID.stdout }} admin http://controller:9696 

- name: COMMON | Install Neutron packages
  package: name={{ item }} state=present
  with_items:
    - openstack-neutron
    - openstack-neutron-ml2
    - openstack-neutron-linuxbridge
    - ebtables

- name: Replace default /etc/neutron/neutron.conf file with configured 'neutron.conf' file from templates
  template: src=neutron.conf dest=/etc/neutron/neutron.conf
  
- name: Replace default /etc/neutron/plugins/ml2/ml2_conf.ini file with configured 'ml2_conf.ini' file from templates
  template: src=ml2_conf.ini dest=/etc/neutron/plugins/ml2/ml2_conf.ini
  
- name: Replace default /etc/neutron/plugins/ml2/linuxbridge_agent.ini file with configured 'linuxbridge_agent.ini' file from templates
  template: src=linuxbridge_agent.ini dest=/etc/neutron/plugins/ml2/linuxbridge_agent.ini

- name: Replace default /etc/neutron/l3_agent.ini file with configured 'l3_agent.ini' file from templates
  template: src=l3_agent.ini dest=/etc/neutron/l3_agent.ini

- name: Replace default /etc/neutron/metadata_agent.ini file with configured 'metadata_agent.ini' file from templates
  template: src=metadata_agent.ini dest=/etc/neutron/metadata_agent.ini

- shell: ls -l /etc/neutron/plugin.ini | grep ml2_conf.ini || ln -s /etc/neutron/plugins/ml2/ml2_conf.ini /etc/neutron/plugin.ini

# - shell: su -s /bin/sh -c "neutron-db-manage --config-file /etc/neutron/neutron.conf  --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head" neutron

- command: neutron-db-manage --config-file /etc/neutron/neutron.conf  --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head
  become: yes
  become_user: neutron
  ignore_errors: yes
  tags: test




- name: restart openstack-nova-api.service 
  command: systemctl restart openstack-nova-api.service
  notify: start neutron
  tags: systemctl




# - os_project:
#     cloud: mycloud
#     state: present
#     name: crazy
#     description: demodescription
#     domain_id: default
#     enabled: True
#     tags: openstack


# - os_project:
#     cloud: mycloud
#     state: absent
#     name: demoprojec





















